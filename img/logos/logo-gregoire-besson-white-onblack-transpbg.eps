%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G1036) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 500 500
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 500 500
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
330.3945 126.717 m
330.39249 123.606 329.9245 121.476 328.5405 120.097 c
327.1395 118.728 325.0405 118.323 322.1145 118.32 c
304.46149 118.32 l
304.46149 126.562 l
304.46249 129.61099 304.88849 131.752 306.2485 133.17101 c
307.6225 134.578 309.72751 135.035 312.7435 135.039 c
330.3945 135.039 l
330.3945 126.717 l
h
312.58749 141.951 m
307.86249 141.95399 304.0065 140.48199 301.35349 137.80901 c
298.6965 135.13699 297.27451 131.30901 297.27649 126.717 c
297.27649 111.329 l
322.28351 111.329 l
327.07349 111.329 330.92249 112.739 333.5585 115.383 c
336.20251 118.029 337.58151 121.864 337.57849 126.562 c
337.57849 141.951 l
312.58749 141.951 l
h
W*
0 0 500 500 rc
292.27649 146.951 m
342.57849 146.951 l
342.57849 106.329 l
292.27649 106.329 l
h
f
Q
q
119.4804 118.1614 m
119.4804 135.07739 l
142.09441 135.07739 l
142.9774 135.0804 143.7394 134.8754 144.28841 134.3694 c
144.8334 133.8634 145.0704 133.1214 145.06641 132.30141 c
145.06641 131.3764 144.8504 130.5764 144.31641 130.0024 c
143.7814 129.4234 142.9904 129.1684 142.09441 129.17039 c
125.6984 129.17039 l
125.6984 124.1054 l
142.09441 124.1054 l
142.9904 124.1134 143.7814 123.8584 144.31641 123.2794 c
144.8504 122.7034 145.06641 121.9004 145.06641 120.9774 c
145.0704 120.1404 144.8374 119.3924 144.28841 118.8784 c
143.7404 118.3674 142.9774 118.1614 142.09441 118.1614 c
119.4804 118.1614 l
h
148.9054 126.8984 m
151.3204 128.0264 152.6824 130.4644 152.6404 133.90041 c
152.6414 136.47839 151.92841 138.54041 150.4344 139.92239 c
148.94141 141.3054 146.7664 141.94839 144.0034 141.94839 c
112.3004 141.94839 l
112.3004 111.3294 l
144.0034 111.3294 l
146.7664 111.3294 148.94141 111.9754 150.4344 113.3574 c
151.92841 114.7414 152.6414 116.7994 152.6364 119.3764 c
152.67641 123.0814 151.31641 125.7024 148.9054 126.8984 c
148.9054 126.8984 l
h
W*
0 0 500 500 rc
107.3004 146.94839 m
157.64134 146.94839 l
157.64134 106.3294 l
107.3004 106.3294 l
h
f
Q
q
243.7587 129.37131 m
242.5777 129.36929 l
213.17371 129.36929 l
213.2617 130.03329 l
213.6127 133.24831 215.71069 135.10429 218.9247 135.03931 c
243.6037 135.03931 l
243.6037 141.9483 l
220.44769 141.9483 l
215.89169 141.9483 212.36771 140.8963 209.97771 138.6893 c
207.58369 136.48129 206.4187 133.1803 206.4267 128.9433 c
206.4267 123.9153 l
236.9527 123.9153 l
236.8407 123.2263 l
236.4017 120.1903 234.4187 118.2653 231.2597 118.3193 c
207.6087 118.3203 l
206.4267 118.3203 l
206.4267 111.3323 l
229.7527 111.3323 l
234.2997 111.3323 237.8187 112.3883 240.2057 114.5933 c
242.6017 116.7993 243.7637 120.0983 243.7617 124.3353 c
243.7587 129.37131 l
h
W*
0 0 500 500 rc
201.42667 146.9483 m
248.7617 146.9483 l
248.7617 106.3323 l
201.42667 106.3323 l
h
f
Q
q
289.14249 129.37131 m
287.96051 129.36929 l
258.5585 129.36929 l
258.64749 130.03329 l
258.99649 133.24831 261.09549 135.10429 264.3075 135.03931 c
288.98749 135.03931 l
288.98749 141.9483 l
265.8295 141.9483 l
261.27451 141.9483 257.75351 140.8963 255.3615 138.6893 c
252.96651 136.48129 251.80251 133.1803 251.8085 128.9433 c
251.8085 123.9153 l
282.33749 123.9153 l
282.22549 123.2263 l
281.7865 120.1903 279.80551 118.2653 276.6445 118.3193 c
252.9915 118.3203 l
251.8085 118.3203 l
251.8085 111.3323 l
275.13751 111.3323 l
279.68549 111.3323 283.20551 112.3883 285.59052 114.5933 c
287.9845 116.7993 289.14749 120.0983 289.1445 124.3353 c
289.14249 129.37131 l
h
W*
0 0 500 500 rc
246.80847 146.9483 m
294.1445 146.9483 l
294.1445 106.3323 l
246.80847 106.3323 l
h
f
Q
q
378.80661 141.9485 m
378.80661 124.0645 l
378.80661 123.9795 378.80759 123.8865 378.80859 123.7935 c
378.66061 123.9545 l
371.3136 131.92751 362.4256 138.8255 352.8736 141.9225 c
352.78961 141.9485 l
345.93561 141.9485 l
345.93561 111.3305 l
354.10461 111.3305 l
354.10461 131.6745 l
354.10361 131.9165 354.08359 132.3185 354.04861 132.88651 c
354.4426 132.7495 354.79761 132.6255 355.12659 132.4935 c
362.57761 129.63651 370.32761 122.6165 378.3736 111.5745 c
378.5506 111.3305 l
387.0166 111.3305 l
387.0166 141.9485 l
378.80661 141.9485 l
h
W*
0 0 500 500 rc
340.93561 146.9485 m
392.0166 146.9485 l
392.0166 106.3305 l
340.93561 106.3305 l
h
f
Q
q
176.1503 134.9416 m
198.0863 134.9416 l
199.27029 134.9436 l
199.27029 141.85361 l
175.99631 141.85361 l
171.33031 141.8546 167.47729 140.4046 164.8053 137.7426 c
162.13631 135.0836 160.6843 131.2506 160.68629 126.6226 c
160.68629 111.2346 l
199.27029 111.2346 l
199.27029 118.2236 l
167.87331 118.2236 l
167.87331 123.8176 l
193.5193 123.8176 l
193.5193 129.27161 l
168.0663 129.27161 l
168.2823 130.0256 l
169.1283 133.1176 171.64931 134.99361 176.1503 134.9416 c
W*
0 0 500 500 rc
155.68629 146.85361 m
204.27029 146.85361 l
204.27029 106.2346 l
155.68629 106.2346 l
h
f
Q
q
105.6484 179.8206 m
105.6484 174.36659 l
110.3154 174.36659 l
110.1194 173.6236 l
109.3134 170.3226 107.0514 168.6936 102.4814 168.7726 c
85.415398 168.7726 l
85.415398 176.89861 l
85.418404 180.0006 85.805397 182.1636 87.152397 183.60361 c
88.514397 185.0336 90.626404 185.4926 93.697403 185.4946 c
116.7624 185.4946 l
117.9454 185.49561 l
117.9454 192.4066 l
93.5784 192.4066 l
88.765404 192.4066 84.9114 190.9966 82.2724 188.34959 c
79.636398 185.70461 78.268402 181.8696 78.2714 177.1736 c
78.2714 161.78461 l
102.6384 161.78461 l
107.6114 161.78461 111.3594 162.7336 113.9144 165.62959 c
116.3944 168.45461 117.6534 172.9296 118.1054 179.8206 c
105.6484 179.8206 l
h
W*
0 0 500 500 rc
73.271393 197.4066 m
123.1054 197.4066 l
123.1054 156.78461 l
73.271393 156.78461 l
h
f
Q
q
247.73531 179.8206 m
247.73531 174.36659 l
252.40131 174.36659 l
252.2063 173.6236 l
251.4003 170.3226 249.1393 168.6936 244.56731 168.7726 c
227.5033 168.7726 l
227.5033 176.89861 l
227.5063 180.0006 227.8933 182.1636 229.2403 183.60361 c
230.6033 185.0336 232.7153 185.4926 235.7843 185.4946 c
258.85229 185.4946 l
260.03229 185.49561 l
260.03229 192.4066 l
235.6653 192.4066 l
230.85229 192.4066 226.99631 190.9966 224.3613 188.34959 c
221.7243 185.70461 220.3553 181.8696 220.35831 177.1736 c
220.35831 161.78461 l
244.7263 161.78461 l
249.6983 161.78461 253.4463 162.7336 256.00131 165.62959 c
258.48431 168.45461 259.74329 172.9296 260.1933 179.8206 c
247.73531 179.8206 l
h
W*
0 0 500 500 rc
215.35829 197.4066 m
265.1933 197.4066 l
265.1933 156.78461 l
215.35829 156.78461 l
h
f
Q
q
156.4579 173.4534 m
163.13589 174.50639 166.7179 178.95641 166.6479 186.1924 c
166.6479 192.4064 l
126.3479 192.4064 l
126.3479 161.7854 l
134.7159 161.7854 l
134.7159 185.4944 l
159.8389 185.4944 l
159.7299 184.81039 l
159.29491 181.6974 157.3139 179.7664 154.1519 179.8244 c
154.1519 179.8204 l
139.2159 179.8204 l
139.2159 173.18539 l
146.13789 173.18539 l
157.4989 161.78439 l
167.8129 161.78439 l
156.4579 173.4534 l
h
W*
0 0 500 500 rc
121.3479 197.4064 m
172.8129 197.4064 l
172.8129 156.78439 l
121.3479 156.78439 l
h
f
Q
q
364.05661 173.4534 m
370.73761 174.50639 374.31561 178.95641 374.2496 186.1924 c
374.2496 192.4064 l
333.94958 192.4064 l
333.94958 161.7854 l
342.31561 161.7854 l
342.31561 185.4944 l
367.44061 185.4944 l
367.3306 184.81039 l
366.8956 181.6974 364.9136 179.7664 361.75259 179.8244 c
361.75259 179.8204 l
346.81561 179.8204 l
346.81561 173.18539 l
353.73859 173.18539 l
365.09961 161.78439 l
375.4166 161.78439 l
364.05661 173.4534 l
h
W*
0 0 500 500 rc
328.94958 197.4064 m
380.4166 197.4064 l
380.4166 156.78439 l
328.94958 156.78439 l
h
f
Q
q
199.9706 199.83031 m
186.9996 195.9633 l
186.9996 194.89931 l
188.1806 194.89931 l
188.99561 194.89931 l
199.9706 194.90131 l
199.9706 199.83031 l
h
W*
0 0 500 500 rc
181.9996 204.83031 m
204.9706 204.83031 l
204.9706 189.89931 l
181.9996 189.89931 l
h
f
Q
q
301.24109 177.1721 m
301.23709 174.0611 300.77109 171.9301 299.38708 170.5491 c
297.9841 169.1821 295.88708 168.77811 292.9621 168.7731 c
275.3071 168.7731 l
275.3071 177.01511 l
275.31009 180.06509 275.73309 182.20509 277.09509 183.6241 c
278.46909 185.0331 280.57611 185.4901 283.59109 185.49409 c
301.24109 185.49409 l
301.24109 177.1721 l
h
283.43109 192.4061 m
278.70911 192.4081 274.8541 190.9361 272.2001 188.2621 c
269.54309 185.5901 268.12009 181.7601 268.12509 177.1721 c
268.12509 161.7841 l
293.12909 161.7841 l
297.91809 161.7841 301.77011 163.1931 304.40311 165.8381 c
307.0491 168.48309 308.4281 172.31709 308.42709 177.01511 c
308.42709 192.4061 l
283.43109 192.4061 l
h
W*
0 0 500 500 rc
263.12509 197.4061 m
313.42709 197.4061 l
313.42709 156.7841 l
263.12509 156.7841 l
h
f
Q
q
190.2236 185.3967 m
212.15961 185.3967 l
213.3416 185.3967 l
213.3416 192.30769 l
190.0676 192.30769 l
185.4006 192.30969 181.5506 190.8577 178.87959 188.19569 c
176.2086 185.5377 174.7556 181.7037 174.7606 177.0757 c
174.7606 161.6877 l
213.3416 161.6877 l
213.3416 168.6757 l
181.9436 168.6757 l
181.9436 174.2717 l
207.5916 174.2717 l
207.5916 179.7247 l
182.1376 179.7247 l
182.3566 180.47971 l
183.2016 183.57269 185.72459 185.44769 190.2236 185.3967 c
W*
0 0 500 500 rc
169.76059 197.30771 m
218.3416 197.30771 l
218.3416 156.6877 l
169.76059 156.6877 l
h
f
Q
q
396.9267 185.3967 m
418.86169 185.3967 l
420.04568 185.3967 l
420.04568 192.30769 l
396.7717 192.30769 l
392.10571 192.30969 388.25269 190.8577 385.58371 188.19569 c
382.91171 185.5377 381.46069 181.7037 381.46271 177.0757 c
381.46271 161.6877 l
420.04568 161.6877 l
420.04568 168.6757 l
388.64871 168.6757 l
388.64871 174.2717 l
414.29471 174.2717 l
414.29471 179.7247 l
388.84171 179.7247 l
389.05771 180.47971 l
389.90369 183.57269 392.4267 185.44769 396.9267 185.3967 c
W*
0 0 500 500 rc
376.46271 197.30771 m
425.04568 197.30771 l
425.04568 156.6877 l
376.46271 156.6877 l
h
f
Q
q
316.90302 161.784 m
325.272 161.784 l
325.272 192.403 l
316.90302 192.403 l
316.90302 161.784 l
h
W*
0 0 500 500 rc
311.90302 197.403 m
330.272 197.403 l
330.272 156.784 l
311.90302 156.784 l
h
f
Q
q
282.96036 300.98349 m
282.96036 300.98392 330.84659 301.32275 426.61914 302 c
315.4921 242.18036 l
256 242.18036 l
275.16302 262.12024 284.14981 281.72128 282.96036 300.98349 c
h
W*
0 0 500 500 rc
251 307 m
431.61914 307 l
431.61914 237.18036 l
251 237.18036 l
h
f
Q
q
215.65875 300.98349 m
215.65878 300.98392 167.77254 301.32275 72 302 c
183.12703 242.18036 l
242.61913 242.18036 l
223.45612 262.12024 214.46933 281.72128 215.65875 300.98349 c
h
W*
0 0 500 500 rc
67 237.18036 m
247.61913 237.18036 l
247.61913 307 l
67 307 l
h
f
Q
q
282.96036 329.19684 m
282.96036 329.19644 330.84659 328.8576 426.61914 328.18036 c
315.4921 388 l
256 388 l
275.16302 368.06012 284.14981 348.45908 282.96036 329.19684 c
h
W*
0 0 500 500 rc
251 323.18036 m
431.61914 323.18036 l
431.61914 393 l
251 393 l
h
f
Q
q
215.65875 329.19684 m
215.65878 329.19644 167.77254 328.8576 72 328.18036 c
183.12703 388 l
242.61913 388 l
223.45612 368.06012 214.46933 348.45908 215.65875 329.19684 c
h
W*
0 0 500 500 rc
247.61913 323.18036 m
67 323.18036 l
67 393 l
247.61913 393 l
h
f
ep
end
%%Trailer
%%EOF
